<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>slice on subond&#39;s blog</title>
    <link>http://www.subond.com/tags/slice/</link>
    <description>Recent content in slice on subond&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 13 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.subond.com/tags/slice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Slice性能与技巧</title>
      <link>http://www.subond.com/post/003_golang_array_and_slice/</link>
      <pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/003_golang_array_and_slice/</guid>
      <description>Go中Slice性能与技巧 一个数组中的所有元素均存放在此数组的直接部分，一个切片的所有元素均存放在此切片的间接部分。
slice是Go语言中一个重要的数据类型，而且很好用，但是也有一些坑，需要我们对slice有深入的理解。
slice跟数组array很类似，可以使用下标进行访问，如果越界则会产生panic。
1、slice到底是个啥 为了更好地理解切片类型和和切片值，我们需要对切片内部结构有一个基本的认识。在Go语言中，切片类型的内部定义大致如下：
1 2 3 4 5 6 // runtime/slice.go type slice struct { array unsafe.Pointer // 引用着底层存储在间接部分上的元素 len int // 长度 cap int // 容量 } 通过定义我们可以看到slice有三个属性，分别：</description>
    </item>
    
  </channel>
</rss>
