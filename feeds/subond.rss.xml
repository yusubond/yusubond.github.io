<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Milestone - subond</title><link>http://localhost:8005/</link><description></description><lastBuildDate>Tue, 21 Mar 2017 00:00:00 +0800</lastBuildDate><item><title>深入理解Paxos算法</title><link>http://localhost:8005/pages/2017/03/21/learn-paxos-in-distributed-system.html</link><description>&lt;p&gt;Paxos算法是Leslie Lanmport(2013年获图灵奖)在1990年提出的一种基于消息传递的共识算法(也称为:一致性算法)，由于算法难以理解并没有被ACM TOCS发表。直到1998年，才引起人们的注意，Lanmport重新发表文章。为了便于人们通俗地理解Paxos算法，Lanmport于2001年简化原来的文章，发表了&lt;a href="http://on64c9tla.bkt.clouddn.com/2017A/paxos-simple-Copy.pdf"&gt;Paxos Made Simple&lt;/a&gt;，文章循序渐进地推导出了Paxos算法，并用数学归纳法进行了证明。在此基础上，本文结合Paxos Made Simple，与其他优秀的Paxos算法解读，重新描述Paxos协议，希望可以深入理解基本的Paxos算法理论。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 21 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2017-03-21:/pages/2017/03/21/learn-paxos-in-distributed-system.html</guid><category>Algorithm</category><category>Distributed Systems</category></item><item><title>初识Open Source MANO</title><link>http://localhost:8005/pages/2016/12/03/introduction-about-osm.html</link><description>&lt;p&gt;Open Source Management and Orchestration (MANO)，简称Open Source MANO,即OSM，是一个开源社区，旨在为NFV提供满足商用NFV网络需求的生产质量(production-quality)的MANO软件堆栈，具有创建商用公开发布信息的模型能力，适用于所有所有人，适用于所有的VNFs(虚拟网络功能)，而且更重要的是，小操作与VIM(Virtual Infrastructure Management,虚拟基础设施管理)无关。OSM与NFV ISG信息模型保持一致，同时能够根据其实施经验提供第一手的反馈。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sat, 03 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-12-03:/pages/2016/12/03/introduction-about-osm.html</guid><category>NFV</category><category>Orchestration</category><category>juju</category></item><item><title>读书写作那点事儿</title><link>http://localhost:8005/pages/2016/11/15/something-about-reading-and-writing.html</link><description>&lt;p&gt;知识就是力量，从来都不是一句空话。获取知识的途径有很多，读书无疑是有效的方式之一。那么，有哪些较好的读书路径值得我们参考呢？李笑来老师给出了以下几个方法：1) &lt;strong&gt;泛读，即广泛地阅读&lt;/strong&gt;。尤其是开始的时候，应尽得杂一点，漫无目的地读，慢慢地就会发现读书的乐趣，发现自己感兴趣的点，而后就可以着点而入，深入阅读。这是一个广散网，寻找点的过程。2) &lt;strong&gt;学会挑书，形成自己的书单&lt;/strong&gt;。总的来说，挑书应该有这样一个原则：能够帮助我们认清现实并思考未来，且具有 &lt;strong&gt;繁殖能力&lt;/strong&gt; 的书。能够帮组我们认清现实并有所思考的书多为非虚构类的书，这一类书可以往往能够就某一问题，或某一现象，甚至某个学科做较为深入的分析与探讨，是我们了解当下现实的基础，而书中关于这些问题的讨论有可以启发我们对未来的思考。具有繁殖能力的知识，往往是那些能够激发我们阅读欲望，探索问题解决之道；亦或与我们原有的知识形成冲突，或者形成补充的知识，这是一个不断发现其他点，形成星星之火的过程。3) &lt;strong&gt;建立检索书库，方便日后查询&lt;/strong&gt;。选择一款自己喜欢的笔记软件，不断地做好自己的阅读笔记。将阅读过程中发现的亮点和思考，以及相关的书目形成记录。如何做好阅读笔记，这是一个将点连接成线，进而形成一个面的过程。4) &lt;strong&gt;杂读，尽量涉及更多的领域和学科&lt;/strong&gt;。想要获得一些意外的收获，杂读就是一个很好的方法。用自己原有的专业知识及系统去接触一个相对陌生的领域和学科，往往可以碰撞出不一样的火花。这是一个发现其他面的过程，并产生面与面交集的过程。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 15 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-11-15:/pages/2016/11/15/something-about-reading-and-writing.html</guid><category>Life</category><category>Writing</category><category>Reading</category></item><item><title>云端服务管理工具:Juju</title><link>http://localhost:8005/pages/2016/11/10/juju-charm-mechanism.html</link><description>&lt;p&gt;Juju是Canonical公司提供的服务编排工具。它是Ubuntu云套件的一部分，与Ubuntu服务器、OpenStack、用于裸机配置的MAAS 、以及用于系统管理和监控的Landscape一起组成Ubuntu云套件。同时，Juju也是 开源的，向用户提供一种面向服务的架构(service oriented architecture)和面向应用的部署(application oriented deployments)的通用模型。Juju可以对云端的服务进行快速可靠的部署，包括拓展云端业务，因此管理员可以很容易地部署Wordpress博客系统，MongoDB大系统管理系统、Mysql数据系统等。目前Juju具有1.25(稳定版)和2.0(升级版)，用户可以自行选择。关于Juju的安装比较简单， 可以参考官网教程。Juju为用户提供了命令行和图形化界面两种方式来进行业务部署，其图形化界面称为"juju-gui"(可利用juju部署到本地系统,juju deploy juju-gui)。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Thu, 10 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-11-10:/pages/2016/11/10/juju-charm-mechanism.html</guid><category>Cloud</category><category>Orchestration</category></item><item><title>机器学习之Weka学习-Evaluation类介绍</title><link>http://localhost:8005/pages/2016/07/03/machinelearning-about-weka-evaluation.html</link><description>&lt;p&gt;Evaluation类顾名思义，用来评价各种分类器（包括机器学习模型）的性能。Weka中有两个Evaluation类，分别位于weka.classifiers.evaluation.Evaluation和weka.classifiers.Evaluation 而且这两个类定义了同样的接口，其中evaluation包下的Evaluation类就是把所有的操作交给classifier包下的Evalution类来完成，也许为了能够适配旧版本已经编写的代码，就保留了classifier包下的 Evalution类，我们暂且不需要即可。下面我们就介绍weka.classifier.Evaluation类。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-07-03:/pages/2016/07/03/machinelearning-about-weka-evaluation.html</guid><category>MachineLearning</category><category>AI</category></item><item><title>机器学习之Weka学习-Instances类介绍</title><link>http://localhost:8005/pages/2016/06/29/machinelearning-about-weka-instances.html</link><description>&lt;p&gt;Instances类是Weka中进行数据操作的对象，即需将所要处理的数据先存入并转化为Instances类的对象，然后进行其他操作。也就是说Instances类是继承AbstractList类而来，并实了Serializable,RevisionHandler接口。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Wed, 29 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-06-29:/pages/2016/06/29/machinelearning-about-weka-instances.html</guid><category>MachineLearning</category><category>AI</category></item><item><title>机器学习之Weka学习-简单分类器</title><link>http://localhost:8005/pages/2016/06/28/machinelearning-about-weka-classifier.html</link><description>&lt;p&gt;Weka的全名是怀卡托智能分析环境（Waikato Environment for Knowledge Analysis），是一款免费的，非商业化的，基于JAVA环境下开源的机器学习（machine learning）以及数据挖掘（data mining）工具。 它和它的源代码可在其&lt;a href="http://www.cs.waikato.ac.nz/ml/weka/"&gt;官方网站&lt;/a&gt;下载。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-06-28:/pages/2016/06/28/machinelearning-about-weka-classifier.html</guid><category>MachineLearning</category><category>AI</category></item><item><title>Linux中的线程管理</title><link>http://localhost:8005/pages/2016/06/19/pthread2-management-in-linux.html</link><description>&lt;p&gt;线程是CPU使用的基本单元，由线程ID，程序计数器，寄存器和栈组成。同属一个进程的所有线程共享代码数据，系统资源。多线程具有如下优点：响应度高，资源共享，更经济(较进程)，充分利用多处理器系统的结构。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 19 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-06-19:/pages/2016/06/19/pthread2-management-in-linux.html</guid><category>linux</category><category>process</category><category>pthread</category></item><item><title>Linux中的进程管理</title><link>http://localhost:8005/pages/2016/06/17/process-management-in-linux.html</link><description>&lt;p&gt;进程是执行中的程序，是大多数系统的工作单元，是 &lt;strong&gt;活动实体&lt;/strong&gt;。一般，进程具有以下几种状态：新的，运行，等待，就绪，终止。每个进程在操作系统中用进程控制块(PCB)表示，其包含许多与一个特定进程相关的信息(进程状态，程序计数器，CPU寄存器，CPU调度信息，内存管理信息，记账信息，I/O状态信息等)。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 17 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-06-17:/pages/2016/06/17/process-management-in-linux.html</guid><category>linux</category><category>process</category></item><item><title>Linux中的线程函数</title><link>http://localhost:8005/pages/2016/06/14/pthread-management-in-linux.html</link><description>&lt;p&gt;线程是CPU使用的基本单元，由线程ID，程序计数器，寄存器和栈组成。同属一个进程的所有线程共享代码数据，系统资源。多线程具有如下优点：响应度高，资源共享，更经济(较进程)，充分利用多处理器系统的结构。本节主要介绍5个基本线程函数。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-06-14:/pages/2016/06/14/pthread-management-in-linux.html</guid><category>linux</category><category>pthread</category><category>process</category></item><item><title>Socket编程之基本UDP编程</title><link>http://localhost:8005/pages/2016/05/24/socket-bian-cheng-udp.html</link><description>&lt;p&gt;UDP套接字编程模型。TCP编写的应用程序和UDP编写的应用程序之间存在本质的差别，其原因在于两者在传输层之间的差异：UDP是无连接不可靠的数据包协议，而不同于TCP提供的面向连接的可靠字节流。使用UDP编写的常见应用程序有：DNS(域名系统)， NFS(网络文件系统)和SNMP(简单网络管理协议)。典型的UDP客户/服务器程序的函数调用如下图1-1所示。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 24 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-05-24:/pages/2016/05/24/socket-bian-cheng-udp.html</guid><category>socket</category><category>newtork programming</category></item><item><title>Socket编程之函数学习篇</title><link>http://localhost:8005/pages/2016/05/17/socket-bian-cheng-xue-xi.html</link><description>&lt;p&gt;Socket编程涉及多个函数，本篇主要介绍其相关函数。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 17 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-05-17:/pages/2016/05/17/socket-bian-cheng-xue-xi.html</guid><category>socket</category><category>newtork programming</category></item><item><title>Socket编程之基础篇</title><link>http://localhost:8005/pages/2016/05/14/socket-bian-cheng-ji-chu.html</link><description>&lt;p&gt;Socket，又称为“套接字”，是进程间进行通信的一种方式，即通过网络库的API函数实现分布在不同主机的相关进程间的数据交换。在TCP/IP网络应用中，通信的两个进程的主要模式是客户/服务器模式， 即客户向服务器发送服务请求，服务器接收到请求后，提供相应的服务。Socket编程接口是指从顶上三层（网际协议的应用层）进入传输层的接口，涉及两个方向上的传递：从进程到内核和从内核到进程，如图1-1所示。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sat, 14 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-05-14:/pages/2016/05/14/socket-bian-cheng-ji-chu.html</guid><category>socket</category><category>newtork programming</category></item><item><title>LTE系统网络架构</title><link>http://localhost:8005/pages/2016/05/10/lte-xi-tong-wang-luo-jia-gou.html</link><description>&lt;p&gt;整个LTE网络是由核心网（EPC,Evolved Packet Core）和接入网（E-UTRAN）组成，如图1-1所示。核心网由许多逻辑节点组成，而接入网只有一个节点，即与用户终端（UE）相连的eNodeB。所有网元都通过接口相互连接，通过对接口的标准化，可以满足众多供应商产品间的互操作性。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 10 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-05-10:/pages/2016/05/10/lte-xi-tong-wang-luo-jia-gou.html</guid><category>architecture</category><category>lte</category></item><item><title>Git学习手记</title><link>http://localhost:8005/pages/2016/04/29/git-xue-xi-shou-ji.html</link><description>&lt;p&gt;Git版本控制功能很强大，作为程序猿必修掌握。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 29 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-04-29:/pages/2016/04/29/git-xue-xi-shou-ji.html</guid><category>git</category><category>gitbook</category></item><item><title>利用Pelican+Github pages搭建个人博客</title><link>http://localhost:8005/pages/2016/04/24/pelican-github-chuang-jian-blog.html</link><description>&lt;p&gt;本教程基于pelican博客引擎和github page的功能，实现个人博客搭建。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 24 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:localhost,2016-04-24:/pages/2016/04/24/pelican-github-chuang-jian-blog.html</guid><category>pelican</category><category>blog</category></item></channel></rss>