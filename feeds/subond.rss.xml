<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>SuperBond - subond</title><link>www.subond.com/</link><description></description><lastBuildDate>Tue, 01 May 2018 00:00:00 +0800</lastBuildDate><item><title>gRPC使用指南</title><link>www.subond.com/pages/2018/05/01/grpc_helloworld.html</link><description>&lt;p&gt;gRPC是一个高性能、开源、通用的RPC框架，面向移动和HTTP/2设计，并且提供多个语言版本支持。本文章基于golang语言，通过概述和一个简单的HelloWorld来介绍gRPC的基本概念和使用方法。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 01 May 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-01:www.subond.com/pages/2018/05/01/grpc_helloworld.html</guid><category>tech</category><category>golang</category><category>rpc</category></item><item><title>年轻的自信与成熟的笃定</title><link>www.subond.com/pages/2017/11/19/confident_and_certainty.html</link><description>&lt;p&gt;当一个年轻人开始逐渐摆脱盲目自信的时候，脚步更加坚定的时候，他迎来的是更加成熟的笃定。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-19:www.subond.com/pages/2017/11/19/confident_and_certainty.html</guid><category>reading</category><category>work</category><category>growth</category></item><item><title>关于找工作的两个基本事实</title><link>www.subond.com/pages/2017/11/08/two_fundamental_truths_about_work.html</link><description>&lt;p&gt;对于应届毕业生而言，由于缺乏工作经验，对工作环境缺少了解，往往不能够很快地进入工作状态。这时候，如果能够获得一份不错的实习机会，对今后的工作可以说是大有裨益。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Wed, 08 Nov 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-08:www.subond.com/pages/2017/11/08/two_fundamental_truths_about_work.html</guid><category>work</category><category>growth</category></item><item><title>初入职场</title><link>www.subond.com/pages/2017/10/08/starting_job.html</link><description>&lt;p&gt;“如何有机会让现在的你遇到刚毕业初入职场的你，你会对他说什么？”这是一个知乎上的问题，以下的回答部门节选自冯大辉。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 08 Oct 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-10-08:www.subond.com/pages/2017/10/08/starting_job.html</guid><category>carrer</category><category>work</category></item><item><title>Vagrant使用案例</title><link>www.subond.com/pages/2017/05/15/vagrant_usage.html</link><description>&lt;h2&gt;1.单机配置&lt;/h2&gt;
&lt;p&gt;1) 配置一个centos7系统，要求使用私有网络地址&lt;code&gt;192.168.10.10&lt;/code&gt;，hostname为dbserver。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;dbserver&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;dbserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;centos/7&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;dbserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;private_network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.10.10&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;dbserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dbserver&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要说明的是：使用私有地址，vm的私有ip只能在各vm间互访，而不能访问Internet，即HOST_ONLY模式；使用公有地址，vm的公有地址将于主机某个网卡(启动vm时需指定)的地址同一网段，vm能够使用该地址访问Internet。&lt;/p&gt;
&lt;p&gt;2) 配置一个ubuntu xenial64系统，并将工程目录下的&lt;code&gt;data&lt;/code&gt;目录同步到vm中 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Mon, 15 May 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-15:www.subond.com/pages/2017/05/15/vagrant_usage.html</guid><category>vagrant</category><category>cloud</category></item><item><title>Vagrant的快速使用</title><link>www.subond.com/pages/2017/05/10/vagrant_startup.html</link><description>&lt;p&gt;Vagrant是为了方便的实现虚拟化环境而设计的，使用Ruby语言开发，基于VirtualBox等虚拟机管理软件的接口，提供了一个可配置、轻量级的便携式虚拟开发环境。使用Vagrant可以很方便的就建立起来一个虚拟环境，而且可以模拟多台虚拟机，形成分布式系统。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-10:www.subond.com/pages/2017/05/10/vagrant_startup.html</guid><category>vagrant</category><category>cloud</category></item><item><title>Docker进阶：服务配置</title><link>www.subond.com/pages/2017/05/01/docker-swarm-jin-jie2.html</link><description>&lt;p&gt;当使用Docker Swarm模式时，我们可以通过命令&lt;code&gt;docker service create&lt;/code&gt;向Swarm集群部署应用服务。Swarm集群中的管理节点将服务描述视为应用服务所需的状态。其次，所有服务相关的命令，即&lt;code&gt;docker service&lt;/code&gt;，一定要在管理节点上运行(管理节点负责Swarm集群中的服务管理和任务编排)。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-01:www.subond.com/pages/2017/05/01/docker-swarm-jin-jie2.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker进阶：以Swarm模式运行Docker引擎</title><link>www.subond.com/pages/2017/04/28/docker-swarm-jin-jie1.html</link><description>&lt;p&gt;Docker Engine 1.12及后续版本支持Swarm模式，我们可以通过以下两种方式开始Swarm模式：创建一个Swarm集群和加入一个已有的Swarm集群。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 28 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-28:www.subond.com/pages/2017/04/28/docker-swarm-jin-jie1.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker集群：工作原理</title><link>www.subond.com/pages/2017/04/26/docker-swarm-gong-zuo-yuan-li.html</link><description>&lt;p&gt;一个Swarm是一组Docker引擎或节点的集群，并在这个集群之上部署服务和应用。我们可以使用Docker命令行工具或者API管理集群中的节点，并且还可以通过Swarm部署和编排相应的服务。当我们没有使用Swarm模式的时候，我们只是简单地对容器进行操作；而在Swarm模式下，我们就可以对服务进行编排。值得注意的是，在同一个Docker实例上既可以运行Swarm的服务，也可以运行独立的容器。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Wed, 26 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-26:www.subond.com/pages/2017/04/26/docker-swarm-gong-zuo-yuan-li.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker集群：服务回滚</title><link>www.subond.com/pages/2017/04/24/docker-swarm-fu-wu-hui-gun.html</link><description>&lt;p&gt;一个Swarm是一组Docker引擎或节点的集群，并在这个集群之上部署服务和应用。我们可以使用Docker命令行工具或者API管理集群中的节点，并且还可以通过Swarm部署和编排相应的服务。当我们没有使用Swarm模式的时候，我们只是简单地对容器进行操作；而在Swarm模式下，我们就可以对服务进行编排。值得注意的是，在同一个Docker实例上既可以运行Swarm的服务，也可以运行独立的容器。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Mon, 24 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-24:www.subond.com/pages/2017/04/24/docker-swarm-fu-wu-hui-gun.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker集群：服务部署</title><link>www.subond.com/pages/2017/04/22/docker-swarm-fu-wu-bu-shu.html</link><description>&lt;p&gt;一个Swarm是一组Docker引擎或节点的集群，并在这个集群之上部署服务和应用。我们可以使用Docker命令行工具或者API管理集群中的节点，并且还可以通过Swarm部署和编排相应的服务。当我们没有使用Swarm模式的时候，我们只是简单地对容器进行操作；而在Swarm模式下，我们就可以对服务进行编排。值得注意的是，在同一个Docker实例上既可以运行Swarm的服务，也可以运行独立的容器。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-22:www.subond.com/pages/2017/04/22/docker-swarm-fu-wu-bu-shu.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker技术：快速上手教程</title><link>www.subond.com/pages/2017/04/20/docker-quickstart.html</link><description>&lt;p&gt;本文目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1.构建容器-Containers"&gt;1.构建容器-Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2.组合服务-Compose"&gt;2.组合服务-Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3.集群管理-Swarm"&gt;3.集群管理-Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4.应用协作-Stacks"&gt;4.应用协作-Stacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.构建容器-Containers&lt;/h3&gt;
&lt;p&gt;Dockerfile将定义容器中环境的内容。通过将访问资源（例如，网络接口和磁盘驱动器）进行虚拟化处理，实现与宿主机系统的隔离。为此，我们需要将端口映射到外部宿主系统环境中，并说明将要把那些文件“复制”到隔离的环境中，即容器。这样之后，我们就可以期望在Dockerfile中定义的应用程序可以在任何地方运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建一个新的空目录，在目录下创建名为&lt;code&gt;Dockerfile&lt;/code&gt;的文件，并写入以下内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Use an official Python runtime as a base image
FROM python:2.7-slim

# Set the working directory to /app …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Thu, 20 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-20:www.subond.com/pages/2017/04/20/docker-quickstart.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker技术：Dockerfile的定义与使用</title><link>www.subond.com/pages/2017/04/18/dockerfile-ding-yi-he-shi-yong.html</link><description>&lt;p&gt;Dockerfile是Docker用来构建镜像的文本文件，包括自定义指令和格式。命令&lt;code&gt;docker build&lt;/code&gt;可以与Dockerfile文件中构建我们自己需要的镜像。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-18:www.subond.com/pages/2017/04/18/dockerfile-ding-yi-he-shi-yong.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker技术：Docker系统架构</title><link>www.subond.com/pages/2017/04/16/docker-xi-tong-jia-gou.html</link><description>&lt;p&gt;本文目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Docker Engine"&gt;Docker Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Docker交付内容"&gt;Docker交付内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Docker系统架构"&gt;Docker系统架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Docker Engine&lt;/h3&gt;
&lt;p&gt;Docker Engine主要包含三个组件，如下图所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Server：一个长时间运行的守护进程。&lt;/li&gt;
&lt;li&gt;REST API：指定程序可以用来与守护进程通信的接口。&lt;/li&gt;
&lt;li&gt;Client：命令行CLI客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Docker全局预览" src="http://on64c9tla.bkt.clouddn.com/2017A/Docker-overview.png"&gt;&lt;/p&gt;
&lt;p&gt;CLI利用脚本或直接输入命令的方式，通过REST API与Docker Daemon(守护进程)进行通信，并完成相关操作。Docker Damemon是负责容器对象的主体，例如镜像，容器实例，网络管理以及数据卷等。&lt;/p&gt;
&lt;h3&gt;Docker交付内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;快速，一致地交付应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker允许开发人员通过提供本地容器标准化环境，从而简化应用程序和服务的开发生命周期。容器可以适用于连续集成和持续开发的工作流程。Docker的便携性和轻量级性质使得轻松实现动态管理工作负载，按照业务需求来实现扩展或拆除应用程序和服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在同一硬件上可允许多个工作流程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker重量轻，速度快。它为基于虚拟机管理程序的虚拟机提供了可行的，具有成本效益的替代方案，因此可以使用更多的计算能力来实现业务目标。Docker是高密度环境和中小型部署的理想选择，您需要用更少的资源来做更多的事情。&lt;/p&gt;
&lt;h3&gt;Docker系统架构&lt;/h3&gt;
&lt;p&gt;Docker采用Client/Server架构模式，其系统架构如下图所示 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 16 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-16:www.subond.com/pages/2017/04/16/docker-xi-tong-jia-gou.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Docker技术：认识Docker</title><link>www.subond.com/pages/2017/04/14/docker-ren-shi-docker.html</link><description>&lt;p&gt;Docker是使用Go语言进行开发实现，基于Linux内核的cgroup, namespace, 以及AUFS类的Union FS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其他隔离的进程，因此成为容器。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 14 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-14:www.subond.com/pages/2017/04/14/docker-ren-shi-docker.html</guid><category>Cloud</category><category>Docker</category></item><item><title>Dynamo分布式键值系统</title><link>www.subond.com/pages/2017/04/09/dynamo-distributed-systems.html</link><description>&lt;p&gt;分布式键值模型是分布式表格模型的一种特例，一般只支持单个key-value的“增、删、查、改”操作，因此适用 &lt;strong&gt;哈希分布算法&lt;/strong&gt;。Amazon Dynamo是分布式键值系统，学习Dynamo的设计思想，设计原则，对理解分布式系统理论很有帮助。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-09:www.subond.com/pages/2017/04/09/dynamo-distributed-systems.html</guid><category>Amazon</category><category>Distributed Systems</category></item><item><title>GFS分布式文件系统</title><link>www.subond.com/pages/2017/04/06/gfs-distributed-systems.html</link><description>&lt;p&gt;分布式文件系统主要有两个功能：一个是存储文档，图像，视频之类的Blob类数据；一个是作为分布式表格系统的持久化层。分布式文件系统中最著名的就是Google File System(GFS)，因此，本章通过介绍GFS的内部实现机制来学习分布式文件系统的知识与设计。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Thu, 06 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-04-06:www.subond.com/pages/2017/04/06/gfs-distributed-systems.html</guid><category>Google</category><category>Distributed Systems</category></item><item><title>深入理解Paxos算法</title><link>www.subond.com/pages/2017/03/21/learn-paxos-in-distributed-system.html</link><description>&lt;p&gt;Paxos算法是Leslie Lanmport(2013年获图灵奖)在1990年提出的一种基于消息传递的共识算法(也称为，一致性算法)，由于算法难以理解并没有被ACM TOCS发表。直到1998年，才引起人们的注意，Lanmport重新发表文章。为了便于人们通俗地理解Paxos算法，Lanmport于2001年简化原来的文章，发表了&lt;a href="http://on64c9tla.bkt.clouddn.com/2017A/paxos-simple-Copy.pdf"&gt;Paxos Made Simple&lt;/a&gt;，文章循序渐进地推导出了Paxos算法，并用数学归纳法进行了证明。在此基础上，本文结合Paxos Made Simple，与其他优秀的Paxos算法解读，重新描述Paxos协议，希望可以深入理解基本的Paxos算法理论。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 21 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-03-21:www.subond.com/pages/2017/03/21/learn-paxos-in-distributed-system.html</guid><category>Algorithm</category><category>Distributed Systems</category></item><item><title>读书写作那点事儿</title><link>www.subond.com/pages/2017/02/21/reading_and_writing.html</link><description>&lt;p&gt;这是一篇关于读书写作的读书笔记，内容源自李笑来老师知乎Live的《我的读书经验》。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-02-21:www.subond.com/pages/2017/02/21/reading_and_writing.html</guid><category>life</category><category>reading</category><category>writing</category></item><item><title>二十五六岁</title><link>www.subond.com/pages/2016/12/15/the_middle_twenties.html</link><description>&lt;p&gt;当一个人开始怀念少年时光的时候，他的少年时代就已经一去不复返了，此时此刻的他俨然成了一个有责任的青年人。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Thu, 15 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-12-15:www.subond.com/pages/2016/12/15/the_middle_twenties.html</guid><category>life</category><category>work</category><category>essay</category></item><item><title>初识Open Source MANO</title><link>www.subond.com/pages/2016/12/03/introduction-about-osm.html</link><description>&lt;p&gt;Open Source Management and Orchestration (MANO)，简称Open Source MANO,即OSM，是一个开源社区，旨在为NFV提供满足商用NFV网络需求的生产质量(production-quality)的MANO软件堆栈，具有创建商用公开发布信息的模型能力，适用于所有所有人，适用于所有的VNFs(虚拟网络功能)，而且更重要的是，小操作与VIM(Virtual Infrastructure Management,虚拟基础设施管理)无关。OSM与NFV ISG信息模型保持一致，同时能够根据其实施经验提供第一手的反馈。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sat, 03 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-12-03:www.subond.com/pages/2016/12/03/introduction-about-osm.html</guid><category>NFV</category><category>Orchestration</category><category>juju</category></item><item><title>读书写作那点事儿</title><link>www.subond.com/pages/2016/11/15/something-about-reading-and-writing.html</link><description>&lt;p&gt;知识就是力量，从来都不是一句空话。获取知识的途径有很多，读书无疑是有效的方式之一。那么，有哪些较好的读书路径值得我们参考呢？李笑来老师给出了以下几个方法：1) &lt;strong&gt;泛读，即广泛地阅读&lt;/strong&gt;。尤其是开始的时候，应尽得杂一点，漫无目的地读，慢慢地就会发现读书的乐趣，发现自己感兴趣的点，而后就可以着点而入，深入阅读。这是一个广散网，寻找点的过程。2) &lt;strong&gt;学会挑书，形成自己的书单&lt;/strong&gt;。总的来说，挑书应该有这样一个原则：能够帮助我们认清现实并思考未来，且具有 &lt;strong&gt;繁殖能力&lt;/strong&gt; 的书。能够帮组我们认清现实并有所思考的书多为非虚构类的书，这一类书可以往往能够就某一问题，或某一现象，甚至某个学科做较为深入的分析与探讨，是我们了解当下现实的基础，而书中关于这些问题的讨论有可以启发我们对未来的思考。具有繁殖能力的知识，往往是那些能够激发我们阅读欲望，探索问题解决之道；亦或与我们原有的知识形成冲突，或者形成补充的知识，这是一个不断发现其他点，形成星星之火的过程。3) &lt;strong&gt;建立检索书库，方便日后查询&lt;/strong&gt;。选择一款自己喜欢的笔记软件，不断地做好自己的阅读笔记。将阅读过程中发现的亮点和思考，以及相关的书目形成记录。如何做好阅读笔记，这是一个将点连接成线，进而形成一个面的过程。4) &lt;strong&gt;杂读，尽量涉及更多的领域和学科&lt;/strong&gt;。想要获得一些意外的收获，杂读就是一个很好的方法。用自己原有的专业知识及系统去接触一个相对陌生的领域和学科，往往可以碰撞出不一样的火花。这是一个发现其他面的过程，并产生面与面交集的过程。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 15 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-11-15:www.subond.com/pages/2016/11/15/something-about-reading-and-writing.html</guid><category>Life</category><category>Writing</category><category>Reading</category></item><item><title>云端服务管理工具:Juju</title><link>www.subond.com/pages/2016/11/10/juju-charm-mechanism.html</link><description>&lt;p&gt;Juju是Canonical公司提供的服务编排工具。它是Ubuntu云套件的一部分，与Ubuntu服务器、OpenStack、用于裸机配置的MAAS 、以及用于系统管理和监控的Landscape一起组成Ubuntu云套件。同时，Juju也是 开源的，向用户提供一种面向服务的架构(service oriented architecture)和面向应用的部署(application oriented deployments)的通用模型。Juju可以对云端的服务进行快速可靠的部署，包括拓展云端业务，因此管理员可以很容易地部署Wordpress博客系统，MongoDB大系统管理系统、Mysql数据系统等。目前Juju具有1.25(稳定版)和2.0(升级版)，用户可以自行选择。关于Juju的安装比较简单， 可以参考官网教程。Juju为用户提供了命令行和图形化界面两种方式来进行业务部署，其图形化界面称为"juju-gui"(可利用juju部署到本地系统,juju deploy juju-gui)。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Thu, 10 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-11-10:www.subond.com/pages/2016/11/10/juju-charm-mechanism.html</guid><category>Cloud</category><category>Orchestration</category></item><item><title>Reply 1988: 人生是个迷啊</title><link>www.subond.com/pages/2016/10/07/reply-1988.html</link><description>&lt;p&gt;人，之所以为人，是因为可以享受生命的意义，生活的乐趣。这是一篇关于韩剧《请回答1988》的观后感。这部剧发生在韩国首尔一个叫做“双门洞”的胡同，讲述了五家人的故事，细致生动地再现了80年代邻里街坊小市民的生活面貌。&lt;strong&gt;整部剧以生活为主线，贯穿亲情，友情，爱情以及邻里情，细致地刻画了那个永远回不去的青春岁月&lt;/strong&gt;。剧中的生活细节做的很足，处处都可以看到编剧和导演的良苦用心。其实，生活无非就是一日三餐，家长里短，却被演员们表现的淋漓尽致，主要集中在以下几个方面。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-10-07:www.subond.com/pages/2016/10/07/reply-1988.html</guid><category>Life</category></item><item><title>工作中遇到的小技巧</title><link>www.subond.com/pages/2016/07/12/tip-tools.html</link><description>&lt;h3&gt;Ubuntu彻底删除Mysql,重装Mysql&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 删除MySQL&lt;/span&gt;
sudo apt-get autoremove --purge mysql-server-5.0
sudo apt-get remove mysql-server
sudo apt-get autoremove mysql-server
sudo apt-get remove mysql-common  &lt;span class="c1"&gt;#很重要&lt;/span&gt;

&lt;span class="c1"&gt;# 清理残留数据&lt;/span&gt;
dpkg -l &lt;span class="p"&gt;|&lt;/span&gt; grep ^rc &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs dpkg -P
&lt;span class="c1"&gt;# 安装mysql&lt;/span&gt;
sudo apt-get install mysql-server mysql-client php5-mysql
&lt;span class="c1"&gt;# 启动mysql&lt;/span&gt;
&lt;span class="c1"&gt;# sudo /etc/init.d/mysql restart&lt;/span&gt;
&lt;span class="c1"&gt;# 安装phpmyadmin&lt;/span&gt;
sudo …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 12 Jul 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-07-12:www.subond.com/pages/2016/07/12/tip-tools.html</guid><category>tools</category></item><item><title>机器学习之Weka学习-Evaluation类介绍</title><link>www.subond.com/pages/2016/07/03/machinelearning-about-weka-evaluation.html</link><description>&lt;p&gt;Evaluation类顾名思义，用来评价各种分类器（包括机器学习模型）的性能。Weka中有两个Evaluation类，分别位于weka.classifiers.evaluation.Evaluation和weka.classifiers.Evaluation 而且这两个类定义了同样的接口，其中evaluation包下的Evaluation类就是把所有的操作交给classifier包下的Evalution类来完成，也许为了能够适配旧版本已经编写的代码，就保留了classifier包下的 Evalution类，我们暂且不需要即可。下面我们就介绍weka.classifier.Evaluation类。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-07-03:www.subond.com/pages/2016/07/03/machinelearning-about-weka-evaluation.html</guid><category>MachineLearning</category><category>AI</category></item><item><title>机器学习之Weka学习-Instances类介绍</title><link>www.subond.com/pages/2016/06/29/machinelearning-about-weka-instances.html</link><description>&lt;p&gt;Instances类是Weka中进行数据操作的对象，即需将所要处理的数据先存入并转化为Instances类的对象，然后进行其他操作。也就是说Instances类是继承AbstractList类而来，并实了Serializable,RevisionHandler接口。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Wed, 29 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-06-29:www.subond.com/pages/2016/06/29/machinelearning-about-weka-instances.html</guid><category>MachineLearning</category><category>AI</category></item><item><title>机器学习之Weka学习-简单分类器</title><link>www.subond.com/pages/2016/06/28/machinelearning-about-weka-classifier.html</link><description>&lt;p&gt;Weka的全名是怀卡托智能分析环境（Waikato Environment for Knowledge Analysis），是一款免费的，非商业化的，基于JAVA环境下开源的机器学习（machine learning）以及数据挖掘（data mining）工具。 它和它的源代码可在其&lt;a href="http://www.cs.waikato.ac.nz/ml/weka/"&gt;官方网站&lt;/a&gt;下载。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-06-28:www.subond.com/pages/2016/06/28/machinelearning-about-weka-classifier.html</guid><category>MachineLearning</category><category>AI</category></item><item><title>Linux中的线程管理</title><link>www.subond.com/pages/2016/06/19/pthread2-management-in-linux.html</link><description>&lt;p&gt;线程是CPU使用的基本单元，由线程ID，程序计数器，寄存器和栈组成。同属一个进程的所有线程共享代码数据，系统资源。多线程具有如下优点：响应度高，资源共享，更经济(较进程)，充分利用多处理器系统的结构。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 19 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-06-19:www.subond.com/pages/2016/06/19/pthread2-management-in-linux.html</guid><category>linux</category><category>process</category><category>pthread</category></item><item><title>Linux中的进程管理</title><link>www.subond.com/pages/2016/06/17/process-management-in-linux.html</link><description>&lt;p&gt;进程是执行中的程序，是大多数系统的工作单元，是 &lt;strong&gt;活动实体&lt;/strong&gt;。一般，进程具有以下几种状态：新的，运行，等待，就绪，终止。每个进程在操作系统中用进程控制块(PCB)表示，其包含许多与一个特定进程相关的信息(进程状态，程序计数器，CPU寄存器，CPU调度信息，内存管理信息，记账信息，I/O状态信息等)。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 17 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-06-17:www.subond.com/pages/2016/06/17/process-management-in-linux.html</guid><category>linux</category><category>process</category></item><item><title>Linux中的线程函数</title><link>www.subond.com/pages/2016/06/14/pthread-management-in-linux.html</link><description>&lt;p&gt;线程是CPU使用的基本单元，由线程ID，程序计数器，寄存器和栈组成。同属一个进程的所有线程共享代码数据，系统资源。多线程具有如下优点：响应度高，资源共享，更经济(较进程)，充分利用多处理器系统的结构。本节主要介绍5个基本线程函数。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-06-14:www.subond.com/pages/2016/06/14/pthread-management-in-linux.html</guid><category>linux</category><category>pthread</category><category>process</category></item><item><title>Socket编程之基本UDP编程</title><link>www.subond.com/pages/2016/05/24/socket-bian-cheng-udp.html</link><description>&lt;p&gt;UDP套接字编程模型。TCP编写的应用程序和UDP编写的应用程序之间存在本质的差别，其原因在于两者在传输层之间的差异：UDP是无连接不可靠的数据包协议，而不同于TCP提供的面向连接的可靠字节流。使用UDP编写的常见应用程序有：DNS(域名系统)， NFS(网络文件系统)和SNMP(简单网络管理协议)。典型的UDP客户/服务器程序的函数调用如下图1-1所示。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 24 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-05-24:www.subond.com/pages/2016/05/24/socket-bian-cheng-udp.html</guid><category>socket</category><category>newtork programming</category></item><item><title>Socket编程之函数学习篇</title><link>www.subond.com/pages/2016/05/17/socket-bian-cheng-xue-xi.html</link><description>&lt;p&gt;Socket编程涉及多个函数，本篇主要介绍其相关函数。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 17 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-05-17:www.subond.com/pages/2016/05/17/socket-bian-cheng-xue-xi.html</guid><category>socket</category><category>newtork programming</category></item><item><title>Socket编程之基础篇</title><link>www.subond.com/pages/2016/05/14/socket-bian-cheng-ji-chu.html</link><description>&lt;p&gt;Socket，又称为“套接字”，是进程间进行通信的一种方式，即通过网络库的API函数实现分布在不同主机的相关进程间的数据交换。在TCP/IP网络应用中，通信的两个进程的主要模式是客户/服务器模式， 即客户向服务器发送服务请求，服务器接收到请求后，提供相应的服务。Socket编程接口是指从顶上三层（网际协议的应用层）进入传输层的接口，涉及两个方向上的传递：从进程到内核和从内核到进程，如图1-1所示。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sat, 14 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-05-14:www.subond.com/pages/2016/05/14/socket-bian-cheng-ji-chu.html</guid><category>socket</category><category>newtork programming</category></item><item><title>LTE系统网络架构</title><link>www.subond.com/pages/2016/05/10/lte-xi-tong-wang-luo-jia-gou.html</link><description>&lt;p&gt;整个LTE网络是由核心网（EPC,Evolved Packet Core）和接入网（E-UTRAN）组成，如图1-1所示。核心网由许多逻辑节点组成，而接入网只有一个节点，即与用户终端（UE）相连的eNodeB。所有网元都通过接口相互连接，通过对接口的标准化，可以满足众多供应商产品间的互操作性。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Tue, 10 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-05-10:www.subond.com/pages/2016/05/10/lte-xi-tong-wang-luo-jia-gou.html</guid><category>architecture</category><category>lte</category></item><item><title>Git学习手记</title><link>www.subond.com/pages/2016/04/29/git-xue-xi-shou-ji.html</link><description>&lt;p&gt;Git版本控制功能很强大，作为程序猿必修掌握。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Fri, 29 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-04-29:www.subond.com/pages/2016/04/29/git-xue-xi-shou-ji.html</guid><category>git</category><category>gitbook</category></item><item><title>利用Pelican+Github pages搭建个人博客</title><link>www.subond.com/pages/2016/04/24/pelican-github-chuang-jian-blog.html</link><description>&lt;p&gt;本教程基于pelican博客引擎和github page的功能，实现个人博客搭建。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">subond</dc:creator><pubDate>Sun, 24 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-04-24:www.subond.com/pages/2016/04/24/pelican-github-chuang-jian-blog.html</guid><category>pelican</category><category>blog</category></item></channel></rss>