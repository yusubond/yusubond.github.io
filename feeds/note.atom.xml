<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Milestone - Note</title><link href="http://localhost:8005/" rel="alternate"></link><link href="http://localhost:8005/feeds/note.atom.xml" rel="self"></link><id>http://localhost:8005/</id><updated>2016-04-29T00:00:00+08:00</updated><entry><title>Git学习手记</title><link href="http://localhost:8005/pages/2016/04/29/git-xue-xi-shou-ji.html" rel="alternate"></link><published>2016-04-29T00:00:00+08:00</published><updated>2016-04-29T00:00:00+08:00</updated><author><name>subond</name></author><id>tag:localhost,2016-04-29:/pages/2016/04/29/git-xue-xi-shou-ji.html</id><summary type="html">&lt;p&gt;Git版本控制功能很强大，作为程序猿必修掌握。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;一、基础篇&lt;/h2&gt;
&lt;h3&gt;指令介绍&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#配置仓库参数，作为一个标志&lt;/span&gt;
git config --global user.email &lt;span class="s2"&gt;&amp;quot;useremail&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#配置仓库参数，作为一个标志&lt;/span&gt;
git init                      &lt;span class="c1"&gt;#把当前目录变成git可管理的仓库&lt;/span&gt;
git add files          &lt;span class="c1"&gt;#添加文件到暂存区&lt;/span&gt;
git diff file          &lt;span class="c1"&gt;#查看文件的修改内容&lt;/span&gt;
git commit -m &lt;span class="s2"&gt;&amp;quot;提交说明信息&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;#提交文件到仓库&lt;/span&gt;
git status                    &lt;span class="c1"&gt;#获取当前仓库中文档的状态&lt;/span&gt;
git log                       &lt;span class="c1"&gt;#查看历史记录&lt;/span&gt;
git log -pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline       &lt;span class="c1"&gt;#单行显示历史信息&lt;/span&gt;
git reflog                    &lt;span class="c1"&gt;#显示版本号&lt;/span&gt;
git checkout -- file          &lt;span class="c1"&gt;#取出文件&lt;/span&gt;
git remote add origin &amp;lt;仓库地址&amp;gt;    &lt;span class="c1"&gt;#添加远程仓库地址&lt;/span&gt;
git push origin &amp;lt;分支名1&amp;gt;          &lt;span class="c1"&gt;#推送本地内容到远程仓库分支1&lt;/span&gt;
git pull origin &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
                                  &lt;span class="c1"&gt;#取回远程主机某个分支，并与本地指定分支合并&lt;/span&gt;
git clone &amp;lt;仓库地址&amp;gt;               &lt;span class="c1"&gt;#克隆远程仓库到本地仓库&lt;/span&gt;
git remote            &lt;span class="c1"&gt;#查看远程仓库信息&lt;/span&gt;
git remote -v         &lt;span class="c1"&gt;#查看远程仓库详细信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;版本回退&lt;/h3&gt;
&lt;p&gt;git reset --hard 版本号(即commit_id)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git reset --hard HEAD^      &lt;span class="c1"&gt;#回退至上一版本&lt;/span&gt;
git reset --hard HEAD^^     &lt;span class="c1"&gt;#回退至上上版本&lt;/span&gt;
git reset --hard HEAD~10    &lt;span class="c1"&gt;#回退至前10个版本&lt;/span&gt;
git reset --hard commit_id  &lt;span class="c1"&gt;#结合git reflog;git log使用&lt;/span&gt;
                            &lt;span class="c1"&gt;#git log可以查看提交历史，以便确定回退到哪个版本;&lt;/span&gt;
                            &lt;span class="c1"&gt;#git reflog可以查看命令历史，以便确定回到未来的哪个版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;分支操作&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git branch                &lt;span class="c1"&gt;#查看分支&lt;/span&gt;
git checkout &amp;lt;分支名1&amp;gt;       &lt;span class="c1"&gt;#切换至分支名1&lt;/span&gt;
git checkout -b &amp;lt;分支名1&amp;gt;  &lt;span class="c1"&gt;#创建并切换至分支名1&lt;/span&gt;
git merge &amp;lt;分支名1&amp;gt;        &lt;span class="c1"&gt;#合并分支名1至当前分支&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;提交文件步骤&lt;/h3&gt;
&lt;p&gt;第一步：&lt;code&gt;git add file_name&lt;/code&gt;,提交文件到暂存区(Index)&lt;/p&gt;
&lt;p&gt;第二步：&lt;code&gt;git commit -m "message about file"&lt;/code&gt;,提交文件到本地仓库(Repository)&lt;/p&gt;
&lt;p&gt;第三步：&lt;code&gt;git push origin master&lt;/code&gt;,提交文件到远程仓库master分支(Remote)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 第一次推送至master分支，需要使用-u参数，即&lt;code&gt;git push -u origin master&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="git-mechism" src="http://on64c9tla.bkt.clouddn.com/20160429gitcaozuo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图1 Git基本操作示意图&lt;/p&gt;
&lt;p&gt;几个名词解释：&lt;/p&gt;
&lt;p&gt;Workspace:工作区&lt;br&gt;
Index：暂存区&lt;br&gt;
Repository：仓库区(本地仓库)&lt;br&gt;
Remote：远程仓库  &lt;/p&gt;
&lt;h2&gt;二、进阶篇&lt;/h2&gt;
&lt;h3&gt;分支管理&lt;/h3&gt;
&lt;p&gt;一般而言，主分支master分支是非常稳定的版本，可以用来直接发布，一般情况下不允许直接在上面进行修改。一般都是新建一个dev分支，在dev分支上进行修改操作，工作完成后可合并到主分支master上。其流程一般如下：
1.创建一个dev分支；&lt;br&gt;
2.修改文件内容；&lt;br&gt;
3.添加到暂存区；&lt;br&gt;
4.切换至主分支(msater)； &lt;br&gt;
5.合并dev分支；&lt;br&gt;
6.查看历史记录。  &lt;/p&gt;
&lt;p&gt;注意:合并分支时，git一般使用“Fast Forward”模式，在这种模式下，删除分支后，会丢掉分支信息。为了保证可以随时查看分支信息，合并时可使用命令git merge -no-ff -m "注释信息" dev&lt;/p&gt;
&lt;h3&gt;Stach功能介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工作过程中，我们一般在自己的分支上修改和调试代码，如果临时接到通知需要修改某个BUG问题，而且自己的工作还需要一段时间才能完成， 而修复BUG问题可能只需要一点时间，此时我们就需要使stash功能。”git stash“通俗地讲就是把当前的工作现场”隐藏起来“，待现场回复后可继续 工作。具体来说就是先使用’git stash'将当前未提交到本地（或服务器）的代码推入git的栈中，这时我们的工作区和上一次提交的内容是一样，所以可以放心的修复BUG问题，等到 修复完成并提交到服务器之后，再使用'git stash apply'将以前的工作应用回来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git stash       &lt;span class="c1"&gt;#备份当前分支的工作区内容，保证工作区内容和上一次提交的内容一致，同时，将当前的工作内容压入git栈中&lt;/span&gt;
git pop         &lt;span class="c1"&gt;#从git栈中读取最近一次保存的内容，恢复工作区的相关内容&lt;/span&gt;
git stash list  &lt;span class="c1"&gt;#显示git栈中所有备份，可以利用列表选择从哪恢复内容&lt;/span&gt;
git stash apply &amp;lt;版本号&amp;gt;   &lt;span class="c1"&gt;#将制定版本号的内容恢复至当前工作区，配合git stash list使用&lt;/span&gt;
git stash clear           &lt;span class="c1"&gt;#清空git栈&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;三、gitbook使用指南&lt;/h2&gt;
&lt;p&gt;gitbook的使用方法和git基本类似，其修改记录，发布版本等相关操作均可参考上面的git指令，略有不同，下面详细介绍：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 初始化书记目录&lt;/span&gt;
gitbook init
&lt;span class="c1"&gt;# 编译图书，可在本地查看&lt;/span&gt;
gitbook serve
&lt;span class="c1"&gt;# 克隆远程图书到本地&lt;/span&gt;
git clone https://git.gitbook.com/user_name/book_name.git
&lt;span class="c1"&gt;# 添加文件&lt;/span&gt;
git add file_name
&lt;span class="c1"&gt;# 提交修改记录&lt;/span&gt;
git commit -m &lt;span class="s2"&gt;&amp;quot;sth about your changes&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# 添加图书的远程地址&lt;/span&gt;
git remote add gitbook https://git.gitbook.com/user_name/book_name.git
&lt;span class="c1"&gt;# 发布图书至远程仓库&lt;/span&gt;
git push -u gitbook master  &lt;span class="c1"&gt;#第一次使用-u参数，之后可以不用加-u参数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category><category term="gitbook"></category></entry></feed>