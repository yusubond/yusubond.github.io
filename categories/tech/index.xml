<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TECH on subond</title>
    <link>http://www.subond.com/categories/tech/</link>
    <description>Recent content in TECH on subond</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://www.subond.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vagrant使用案例</title>
      <link>http://www.subond.com/post/vagrant_usage/</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/vagrant_usage/</guid>
      <description>1.单机配置 配置一个centos7系统，要求使用私有网络地址192.168.10.10，hostname为dbserver。 Vagrant.configure(&amp;#34;2&amp;#34;) do |dbserver| dbserver.vm.box = &amp;#34;centos/7&amp;#34; dbserver.vm.network &amp;#34;private_network&amp;#34;, ip: &amp;#34;192.168.10.10&amp;#34; dbserver.vm.hostname = &amp;#34;dbserver&amp;#34; end 需要说明的是：使用私有地址，vm的私有ip只能在各vm间互访，而不能访问Internet，即HOST_ONLY模式；使用公有地址，vm的公有地址将于主机某个网卡(启动vm时需指定)的地址同一网段，vm能够使用该地址访问Internet。
配置一个ubuntu xenial64系统，并将工程目录下的data目录同步到vm中，目录为/vagrant/project_data；同时将vm的80端口映射到主机的8080端口。 Vagrant.configure(&amp;#34;2&amp;#34;) do |ubuntu16| ubuntu16.vm.box = &amp;#34;ubuntu/xenial64&amp;#34; ubuntu16.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 8080 ubuntu16.vm.synced_folder &amp;#34;/Users/subond/UCloud/VHost/data&amp;#34;, &amp;#34;/project_data&amp;#34; end 需要说明的是：指定同步文件时，第一个参数既可以当前工程目录的相对目录，也可以是主机上的绝对路径；第二个参数是vm中的绝对路径。默认情况下，当前工程目录下的文件将同步至vm中的/vagrant目录下。
配置一个centos7系统，要求设置vm的名字为foobar,内存大小为512M。 Vagrant.configure(&amp;#34;2&amp;#34;) do |centos| centos.vm.box = &amp;#34;centos/7&amp;#34; centos.vm.provider &amp;#34;virtualbox&amp;#34; do |vm| vm.customize [&amp;#34;modifyvm&amp;#34;, :id, &amp;#34;--name&amp;#34;, &amp;#34;foobar&amp;#34;, &amp;#34;--memory&amp;#34;, &amp;#34;512&amp;#34;] end end 2.分布式系统配置 创建两个主机，一个做服务端，hostname为server,一个做客户端，hostname为client，两个虚拟均设置私有网络，并配置dhcp服务。 Vagrant.configure(&amp;#34;2&amp;#34;) do |subond| subond.vm.box = &amp;#34;centos/7&amp;#34; subond.vm.define &amp;#34;server&amp;#34; do |server| server.vm.network &amp;#34;private_network&amp;#34;, type: &amp;#34;dhcp&amp;#34; server.</description>
    </item>
    
    <item>
      <title>Vagrant的快速使用</title>
      <link>http://www.subond.com/post/vagrant_startup/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/vagrant_startup/</guid>
      <description>Vagrant是为了方便的实现虚拟化环境而设计的，使用Ruby语言开发，基于VirtualBox等虚拟机管理软件的接口，提供了一个可配置、轻量级的便携式虚拟开发环境。使用Vagrant可以很方便的就建立起来一个虚拟环境，而且可以模拟多台虚拟机，形成分布式系统。
其次，Vagrant还可以实现文件共享，即用于主机和虚拟之间共享文件，方便开发人员在主机上写程序，再往虚拟里拷贝的麻烦。而且，Vagrant的package功能还可以将完整的开发环境进行打包，供其他人使用，极大地提高了工作效率。
1.Vagrant安装 Vagrant只是一个方便创建，管理虚拟的便携式工具，底层支持由VirtualBox、VMware等虚拟机系统支持。本文以VirtualBox为例，主机系统为Mac OSX。
VirtualBox安装 这是Virtual官网链接https://www.virtualbox.org/wiki/Downloads，可以依据自己的系统选择合适的安装包进行安装。
Vagrant安装 Vagrant官网https://www.vagrantup.com/downloads.html，同样需要依据自己的系统选择合适的安装包进行安装。
2.Vagrant配置 Vagrant配置主要在Vagrantfile文件中，通过vagrant init命令可以获得。
$ mkdir MyHost $ cd MyHost $ vagrant init 在MyHost文件夹下就会出现Vagrantfile文件，该文件是配置虚机的主要的文件。例如，我们想要创建一个Ubuntu Xenial 64位的虚机，并设置虚机的hostname为ubuntu64，则Vagrantfile中进行如下修改：
config.vm.box = &amp;#34;ubuntu/xenial64&amp;#34; config.vm.hostname = &amp;#34;ubuntu64&amp;#34; 3.启动虚拟 在MyHost目录下，通过命令vagrant up即可启动在Vagrantfile文件中配置的虚拟。
$ vagrant up # 进入虚拟 $ vagrant ssh 4.Vagrantfile详解 语言版本 Vagrant.configure(&amp;#34;2&amp;#34;) do |config| 其中&amp;quot;2&amp;quot;指定Vagrantfile所使用的语言版本，一般为2。
box相关 指定创建虚机vm所需的box
config.vm.box = &amp;#34;ubuntu/xenial64&amp;#34; 设置vm的hostname
config.vm.hostname = &amp;#34;ubuntu64&amp;#34; 设置vm的网络，如果是设置私有网络，需指定ip地址；如果设置公有网络，则不需要。
# 设置私有网络 config.vm.network &amp;#34;private_network&amp;#34;, ip: &amp;#34;192.168.33.10&amp;#34; # 设置公有网络 config.vm.network &amp;#34;public_network&amp;#34; # 设置端口映射，即vm80端口映射到主机8080端口 config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 8080 文件同步 将主机的文件(或目录)挂载到vm中，实现文件同步。</description>
    </item>
    
    <item>
      <title>Docker进阶：服务配置</title>
      <link>http://www.subond.com/post/docker_swarm5/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_swarm5/</guid>
      <description>当使用Docker Swarm模式时，我们可以通过命令docker service create向Swarm集群部署应用服务。Swarm集群中的管理节点将服务描述视为应用服务所需的状态。其次，所有服务相关的命令，即docker service，一定要在管理节点上运行(管理节点负责Swarm集群中的服务管理和任务编排)。
本文目录：
创建服务 配置服务 创建服务 Swarm集群中最简单创建服务的方式就是指定所要创建的服务镜像就可以，即命令docker service create &amp;lt;IMAGE&amp;gt;。当执行创建服务命令后，Swarm编排器则向可用节点分派服务任务。一个任务其实就是一个基于指定镜像生成的容器。比如，创建一个nginx web服务。
# 在管理节点上 # --name参数用于指定服务的名称 $ docker service create --name myweb nginx l3w3x4df6tnia8qql64mkdm1s # 查看Swarm集群中的服务 $ docker service ls ID NAME MODE REPLICAS IMAGE l3w3x4df6tni myweb replicated 1/1 nginx:latest 当然，我们也可以在部署服务时指定容器中将要运行的指令，其命令为docker service create &amp;lt;IMAGE&amp;gt; &amp;lt;COMMAND&amp;gt;。
$ docker service create --name myalpine ping www.bing.com 服务配置 当创建一个服务时，我们通过修改配置选项对服务进行限制，命令docker service create --help可以查看创建服务的帮助信息。
配置服务的运行环境
我们可以通过以下参数配置服务的运行环境：
&amp;ndash;env参数可以指定环境变量 &amp;ndash;workdir参数可以指定容器中的工作目录 &amp;ndash;user参数可以指定用户名或者UID # 通过不同的参数配置服务 $ docker service create --name myservice \ --env MYSERVICE=/usr/local/service --workdir /tmp --user subond alpine ping www.</description>
    </item>
    
    <item>
      <title>Docker进阶：以Swarm模式运行Docker引擎</title>
      <link>http://www.subond.com/post/docker_swarm4/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_swarm4/</guid>
      <description>Docker Engine 1.12及后续版本支持Swarm模式，我们可以通过以下两种方式开始Swarm模式：
创建一个Swarm集群 加入一个已有的Swarm集群 本文目录：
创建Swarm 加入Swarm 节点管理 创建Swarm 当我们使用命令行创建一个Swarm集群时，Docker引擎将启用Swarm模式。当执行docker swarm init命令时，Docker引擎将启动一个Swarm集群，主要过程如下：
将当前的模式切换至Swarm模式，并创建一个名为default的Swarm 指定当前节点为Swarm的管理节点，并以当前主机名命名当前节点 配置网络监听端口，端口号为2377 将当前节点设置为Active状态，意味着该节点可以接收调度器分派的任务 启动一个全局分布式数据中心，存储并维护Swarm信息和服务信息 默认情况下，为Swarm集群生成自签名根CA 默认情况下，生成工作节点和管理节点的token(令牌)，用于其他节点加入该Swarm 创建一个名为ingress的overlay网络，用于对外发布服务端口 # 创建一个swarm $ docker swarm init 配置通告地址
管理节点通过通告地址(advertise address)来允许Swarm集群中的其他节点访问Swarmkit API和覆盖网络。Swarm集群上的其他节点必须能够访问其通告地址(Ip地址)上的管理节点。
如果不指定通告地址，Docker则通过检查系统IP，设置其中一个为通告地址，并监听2377端口。如果系统有多个Ip，最好通过&amp;ndash;advertise-addr配置通告地址，以便其他节点能够与管理节点进行通信。
# 设置通告地址 $ docker swarm init --advertise-addr 172.28.128.3:2377 Swarm initialized: current node (34y77dgnqon4soj2kqyb65a9y) is now a manager. To add a worker to this swarm, run the following command: docker swarm join \ --token SWMTKN-1-1omg2k2e92snxv3wlja3komux5wan4hynn80ikkma2s9rd5cxz-9hq2vf8n0jysukytfqpavd8j7 \ 172.28.128.3:2377 To add a manager to this swarm, run &amp;#39;docker swarm join-token manager&amp;#39; and follow the instructions.</description>
    </item>
    
    <item>
      <title>Docker集群：工作原理</title>
      <link>http://www.subond.com/post/docker_swarm3/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_swarm3/</guid>
      <description>一个Swarm是一组Docker引擎或节点的集群，并在这个集群之上部署服务和应用。我们可以使用Docker命令行工具或者API管理集群中的节点，并且还可以通过Swarm部署和编排相应的服务。当我们没有使用Swarm模式的时候，我们只是简单地对容器进行操作；而在Swarm模式下，我们就可以对服务进行编排。值得注意的是，在同一个Docker实例上既可以运行Swarm的服务，也可以运行独立的容器。
本文目录：
节点的工作原理 服务的工作原理 PKI工作原理 节点的工作原理 Docker1.12及其以后版本中引入的Swarm模式，即允许创建一个Docker集群。一个Swarm集群包含一个或多个节点，既可以是物理节点，也可以是虚拟节点。但是，需要保证的是节点上要安装Docker1.12或高于1.12的Docker引擎。
Swarm模式下节点分为两种：管理节点 和 工作节点。
管理节点
管理节点负责集群的管理任务：
维护集群状态信息 服务调度 处理Swarm模式下的API请求 通过Raft原理，管理节点负责维护整个Swarm集群的内部一致状态以及其上运行的所有服务。为了测试其功能，我们可以运行单个管理节点的Swarm集群。为了保证服务的正常运行，如果单个管理节点的Swarm集群失败，则需要创建一个新的Swarm集群来接管原来的服务。
为了很好的利用Swarm集群的容错功能，Docker建议部署奇数个节点以保证整个Swarm集群的高可用性。与此同时，当采用多个管理节点时，Swarm系统可以保证管理节点的故障恢复，而不会导致服务停机。
一个具有三个管理节点的Swarm集群，最多可允许一个管理节点出现故障。 一个具有五个管理节点的Swarm集群，最多可允许两个管理节点出现故障。 一个具有N个管理节点的Swarm集群，最多可允许(N-1)/2个管理节点出现故障。 在一个Swarm集群中，Docker推荐最多部署七个管理节点。因为，更多的管理节点并不一定意味着高可用性和高伸缩性，有时恰恰相反。
工作节点
工作节点也是Docker引擎的实例，主要负责运行容器实例。工作节点不参与Raft分布式状态维护，调度决策的制定以及服务Swarm模式下的API请求。我们可以创建单个管理节点的Swarm集群，但却不能创建具有单个工作节点的Swarm集群。模式情况下，所有的管理节点也是工作节点。当然，也可以通过配置，让管理节点仅负责“管理功能”。
为了防止服务调度器在具有多个节点的Swarm集群中，将任务布置到管理节点上，可以将管理节点的可用性设置为Drain。这样，服务调度器就不会将任务部署到Drain状态的节点上，而只将任务分派到Active状态的节点。
角色转换
Docker Swarm模式中，允许我们将工作节点提升为管理节点以保证整个Swarm集群的正常运行，尤其是在管理节点出现故障时。相关命令可以参考docker node promote。
同样的道理，我们也可以将管理节点变为工作节点。相关命令可以参考docker node demote。
服务的工作原理 在Swarm模式下，Docker允许我们通过创建服务的方式来部署应用镜像。通常情况下，服务是某些更大应用程序的上下文中为服务器的镜像。比如，服务包括HTTP服务器，数据库，或者希望在分布式环境中运行的任何类型的可执行程序。
当创建一个服务的时候，我们需要制定服务需要的镜像(即运行环境)和即将在容器中运行的命令(即应用程序)。当然，也包括其他选项：
端口:在Swarm集群外提供服务的端口 网络方式:用于连接到Swarm集群中其他服务的网络环境 系统限制:CPU和内存限制及预留 更新操作:更新时延策略 副本数量:Swarm中镜像的副本数量 服务，任务与容器
当我们向Swarm集群中部署服务时，管理节点将服务定义为服务所需的状态。然后，将服务以任务副本的方式分派到Swarm集群中的各个节点上。这些任务在Swarm集群中的节点上独立运行。
一个容器就是一个独立的进程。Swarm集群中，每个任务调用一个容器。一个任务类似调度器放置在容器里面的一个”插槽“。一旦容器处于运行状态，调度器能够识别任务处于运行状态。如果容器出现问题或终止，则任务终止。
任务与调度
任务是 Swarm集群中调度的基本单元，具有 原子性，即一个任务在容器中要么运行成功，要么失败。当我们创建或更新一个服务所需要的服务状态时，调度器通过调度任务来满足服务所需的状态。比如，我们创建一个包括三个HTTP监听的服务，调度器则通过创建三个任务来做出响应。每个任务都是调度器通过创建一个容器并填充一个”插槽“来实现。简单来讲就是，容器是任务的实例化。如果其中一个HTTP监听服务失败或崩溃，调度器将创建一个新容器并执行新的任务副本。
任务采用的是 单向机制。它通过一系列状态单独运行：分配，准备，运行等。如果任务失败，调度器将删除该任务及其容器，然后根据服务所需的状态创建一个新任务来替代原来的任务。
Swarm集群的基础逻辑包括 通用调度器 和 编排器。服务和任务均具有抽象性，而将其类型是不可知。假设我们要实现其他类型的任务，比如虚拟机任务或非容器化任务。调度器和编排器对于任务的类型是不可知的。但是，目前Docker只支持容器任务。
Swarm模式下如何接受服务并创建任务，以及将任务分派到其他节点，如下图所示。
复制及全局服务
Swarm模式下有两种服务的部署方式，复制服务 和 全局服务。
复制服务模式下，我们需要制定将要运行的任务副本的数量。比如，部署一个具有三个任务副本的HTTP监控服务，每个任务都具有相同的内容。
全局服务模式下，每个节点均运行一个服务的任务副本，不需要指定任务副本的数量。当新的节点加入Swarm集群后，编排器则创建新的任务并将其分派到该节点。监控服务，反病毒扫描程序或者其他类型的容器都是比较好的全局服务的对象。
PKI工作原理 Docker引擎中内置的公钥基础设施(Public Key Infrastructure)系统使得容器的部署和编排变得更加简单和安全。Swarm集群中的节点使用传输层安全(TLS)来认证，授权和加密它们与集群中其他节点的通信。
当我们使用命令docker swarm init创建一个Swarm集群时，Docker引擎则将当前节点视为一个管理节点。默认情况下，管理节点自身生成一个新的跟证书颁发机构(CA)以及密钥对，以保护与加入集群的其他节点的通信。当然，也可以通过配置&amp;ndash;external-ca参数来指定外部的根证书颁发机构。
与此同时，管理节点还生成两个token值(用于向Swarm集群中加入节点)，一个是工作节点token值，另一个是管理节点token值。每一个token值都包含根CA证书的摘要和随机生成的密钥。当节点加入集群时，它使用摘要来验证远程管理节点的根CA证书，使用密钥来确保该节点是经过批准的节点。
# 创建一个swarm $ docker swarm init # 查看管理节点和工作节点的加入命令 # 向Swarm中加入管理节点 docker swarm join-token manager # 向Swarm中加入工作节点 docker swarm join-token worker $ docker swarm join-token manager To add a manager to this swarm, run the following command: docker swarm join \ --token SWMTKN-1-35n1uqy8q7si9lvkapojdkxjcntl5uixtdg1xo0ib3b2sg9t8g-86w02153sf0kbncz42aoa41p9 \ 10.</description>
    </item>
    
    <item>
      <title>Docker集群：服务回滚</title>
      <link>http://www.subond.com/post/docker_swarm2/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_swarm2/</guid>
      <description>一个Swarm是一组Docker引擎或节点的集群，并在这个集群之上部署服务和应用。我们可以使用Docker命令行工具或者API管理集群中的节点，并且还可以通过Swarm部署和编排相应的服务。当我们没有使用Swarm模式的时候，我们只是简单地对容器进行操作；而在Swarm模式下，我们就可以对服务进行编排。值得注意的是，在同一个Docker实例上既可以运行Swarm的服务，也可以运行独立的容器。
本文目录：
服务更新与回滚 路由网络 服务更新与回滚 Docker Swarm集群管理中支持服务的版本更新及回滚操作，具体演示如下：
所使用的系统环境环境如下：
三个节点(manager, worker1, worker2)均为Ubuntu16.04，即xenial64系统 节点的IP分布，manager(172.28.128.3), worker1(172.28.128.4), worker2(172.28.128.5) 首先，我们将Redis 3.0.6版本部署到Swarm集群中，并指定10s的更新时延。
# 在manger节点上 $ docker service create --replicas 3 --name redis --update-delay 10s redis:3.0.6 # --update-delay参数配置服务任务或任务集的更新的时延 # 其格式为T1hT2mT3s，即T1小时T2分钟T3秒 # 默认情况下，更新调度程序一次更新一个任务。但是，可以配置--update-parallelism参数指定同时更新的最大服务任数 # 默认情况下，当一个任务更新并返回RUNNING状态后，更新调度程序才调度另一个任务进行更新，直到所有的任务更新完成。 # 如果某个任务更新返回FAILED状态，更新调度程序则停止更新。 # 当然，也可以通过配置--update-failure-action参数指定服务创建和更新，例如： # --update-failure-action docker service create # --update-failure-action docker service update # 接下来，我们更新redis的镜像 $ docker service update --image redis:3.0.7 redis 如前所述，默认情况下，更新主要包括以下几个流程：
停止第一个任务 调度器更新已经停止的任务 为更新过的任务启动容器 若任务更新返回RUNNING状态，则等待设定的时延，并进行下一个任务的更新 若任务更新返回FAILED状态，则停止更新 更新结束后，我们看到如下状态：
$ docker service ps redis ID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTS i9c6xvbopko2 redis.</description>
    </item>
    
    <item>
      <title>Docker技术：快速上手教程</title>
      <link>http://www.subond.com/post/docker_quickstart/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_quickstart/</guid>
      <description>本文目录：
1.构建容器-Containers 2.组合服务-Compose 3.集群管理-Swarm 4.应用协作-Stacks 1.构建容器-Containers Dockerfile将定义容器中环境的内容。通过将访问资源（例如，网络接口和磁盘驱动器）进行虚拟化处理，实现与宿主机系统的隔离。为此，我们需要将端口映射到外部宿主系统环境中，并说明将要把那些文件“复制”到隔离的环境中，即容器。这样之后，我们就可以期望在Dockerfile中定义的应用程序可以在任何地方运行。
Dockerfile
创建一个新的空目录，在目录下创建名为Dockerfile的文件，并写入以下内容。
# Use an official Python runtime as a base image FROM python:2.7-slim # Set the working directory to /app WORKDIR /app # Copy the current directory contents into the container at /app ADD . /app # Install any needed packages specified in requirements.txt RUN pip install -r requirements.txt # Make port 80 available to the world outside this container EXPOSE 80 # Define environment variable ENV NAME World # Run app.</description>
    </item>
    
    <item>
      <title>Docker技术：Dockerfile的定义与使用</title>
      <link>http://www.subond.com/post/docker_dockerfile/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_dockerfile/</guid>
      <description>本文目录：
Dockerfile的使用 Dockerfile指令 Dockerfile是Docker用来构建镜像的文本文件，包括自定义指令和格式。命令docker build可以与Dockerfile文件中构建我们自己需要的镜像。
Dockerfile的使用 Dockerfile文件描述了构建镜像的步骤，其中每条指定都是单独执行的。除了FROM指令，其他每条指令都会在上一条指令所生成镜像的基础上执行，执行完成后生成一个新的镜像层。新的镜像层覆盖在原来的镜像之上，进而形成新的镜像。Dockerfile文件所生成的最终镜像是在基础镜像上叠加一层层的镜像形成的。
值得注意的是，Docker引擎在构建镜像的过程中会缓存中间镜像。当从一个已经存在的基础镜像开始构建新镜像时，则将Dockerfile中的下一个指令和基础镜像的所有子镜像进行比较，如果有一个子镜像是由相同的指令生成的，则命中缓存，直接使用该镜像。
Dockerfile指令 Dockerfile的基本格式如下：
# 注释信息 INSTRUCTION arguments Dockerfile指令不区分大小写，但是建议使用大写，方便区分；#开头的表示注释行。根据指令的作用可以分分为两种：构建指令和设置指令。构建指令用于构建镜像，其指定的操作不会运行在镜像的容器上；而设置指令用于设置镜像的属性，其指定的操作运行在镜像的容器上。
FROM 格式：FROM 或FROM :
分类：构建指令
FROM指令指定基础镜像，一个有效的Dockerfile文件必须以FROM作为第一条非注释指令。后续的指令都依赖于该指令指定的image。FROM指令指定的基础image可以是官方远程仓库中的，也可以位于本地仓库。
MAINTAINER 格式：MAINTAINER 分类：构建指令
用于将image的制作者相关的信息写入到image中。当我们对该image执行docker inspect命令时，输出中有相应的字段记录该信息。
RUN 格式：RUN &amp;lt;shell_cmd&amp;gt; # shell格式
或 RUN [&amp;ldquo;exec&amp;rdquo;, &amp;ldquo;param1&amp;rdquo;, &amp;ldquo;param2&amp;rdquo;] # exec格式
分类：构建指令
RUN可以运行任何被基础image支持的命令。如基础image选择了ubuntu，那么软件管理部分只能使用ubuntu的命令。
ENV 格式：ENV 分类：构建指令
ENV指令用于在image中设置一个环境变量。设置完环境变量后，后续的RUN命令都可以使用，container启动后，可以通过docker inspect查看这个环境变量，也可以通过在docker run &amp;ndash;env key=value时设置或修改环境变量。
WORKDIR 格式：WORKDIR 分类：设置指令
WORKDIR用于指定工作目录，相当于切换指令，对RUN,CMD,ENTRYPOINT生效，可设置多次。
ADD 格式：ADD 分类：构建指令
是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url
是container中的绝对路径
所有复制到容器中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，那么会将该目录下的所有文件添加到容器中，不包括目录；如果文件是可识别的压缩格式，则Docker引擎会进行解压缩；如果是文件且中不使用斜杠结束，则会将视为文件，的内容会写入；如果是文件且中使用斜杠结束，则会文件拷贝到目录下。
COPY 格式：COPY 分类：构建指令
COPY指令复制所指向的文件或目录，将其添加至新镜像中，复制的文件或目录在镜像中的路径是。所指定的源可以是多个，但必须使上下文根目录的相对路径；也可以使用通配符指向所有匹配通配符的文件或目录。
可以是文件或目录，但必须使镜像中的绝对路径或相对于WORKDIR的相对路径。
若以反斜杠/结尾则其指向是目录，否则指向文件。同理。
若是文件，则的内容被写入中；否则所指向的文件或目录中的内容被复制到目录中。
当指定多个源时，必须使目录。若不存在，则会被创建。
CMD 格式：RUN &amp;lt;shell_cmd&amp;gt; # shell格式</description>
    </item>
    
    <item>
      <title>Docker技术：Docker系统架构</title>
      <link>http://www.subond.com/post/docker_docker_arch/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_docker_arch/</guid>
      <description>本文目录：
[Docker Engine](#Docker Engine) Docker交付内容 Docker系统架构 Docker Engine Docker Engine主要包含三个组件，如下图所示：
Docker Server：一个长时间运行的守护进程。 REST API：指定程序可以用来与守护进程通信的接口。 Client：命令行CLI客户端。 CLI利用脚本或直接输入命令的方式，通过REST API与Docker Daemon(守护进程)进行通信，并完成相关操作。Docker Damemon是负责容器对象的主体，例如镜像，容器实例，网络管理以及数据卷等。
Docker交付内容 快速，一致地交付应用程序 Docker允许开发人员通过提供本地容器标准化环境，从而简化应用程序和服务的开发生命周期。容器可以适用于连续集成和持续开发的工作流程。Docker的便携性和轻量级性质使得轻松实现动态管理工作负载，按照业务需求来实现扩展或拆除应用程序和服务
在同一硬件上可允许多个工作流程 Docker重量轻，速度快。它为基于虚拟机管理程序的虚拟机提供了可行的，具有成本效益的替代方案，因此可以使用更多的计算能力来实现业务目标。Docker是高密度环境和中小型部署的理想选择，您需要用更少的资源来做更多的事情。
Docker系统架构 Docker采用Client/Server架构模式，其系统架构如下图所示。
Docker客户端与守护进程既可以运行在同一台主机，也运行在不同的主机上，两者利用Unix Socket或网络接口，通过REST API进行通信。
Docker Daemon监听Docker API来相应客户端的请求，完成Docker对象的管理。
Docker客户端是用户与Docker Daemon进行交互的主要方式。
Docker Registries用来管理Docker镜像。</description>
    </item>
    
    <item>
      <title>Docker技术：认识Docker</title>
      <link>http://www.subond.com/post/docker_docker/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/docker_docker/</guid>
      <description>Docker和传统虚拟化方式的不同如下图所示。传统虚拟化技术是虚拟出一套硬件，在其上运行一个完整操作系统，再在该系统之上再运行所需的应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。
本文目录：
1.什么是Docker 2.Docker基本概念 3.Docker安装 4.Docker网络 1.什么是Docker Docker是使用Go语言进行开发实现，基于Linux内核的cgroup, namespace, 以及AUFS类的Union FS等技术，对 进程 进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其他隔离的进程，因此成为容器。
Docker和传统虚拟化方式的不同如下图所示。传统虚拟化技术是虚拟出一套硬件，在其上运行一个完整操作系统，再在该系统之上再运行所需的应用进程；而容器内的 应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。
2.Docker基本概念 Docker包括三个基本概念：镜像、容器、仓库。
1 镜像(Image)
众所周知，操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而Docker镜像，就相当于一个root文件系统。
Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件，也包含一些为应用运行时准备的配置参数。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
分层存储
镜像在构建时，一层层构建，前一层是后一层的基础。每一层构建完成后就不会再发生改变，后一层上的任何改变值发生在自己这一层。当我们使用命令docker pull ubuntu:14.04获取ubuntu14.04镜像时，可以看到每一层的镜像，及其相互依赖关系。
# 获取DockerHub中的ubuntu14.04镜像 $ docker pull ubuntu:16.04 16.04: Pulling from library/ubuntu b6f892c0043b: Pull complete 55010f332b04: Pull complete 2955fb827c94: Pull complete 3deef3fcbd30: Pull complete cf9722e506aa: Pull complete Digest: sha256:382452f82a8bbd34443b2c727650af46aced0f94a44463c62a9848133ecb1aa8 Status: Downloaded newer image for ubuntu:16.04 # 可以看到，整个ubuntu16.04镜像由五层存储构成 # 仓库的元数据 # 在文件/var/lib/docker/image/graph_dirver/repositories.json中可以看到仓库的元数据 $ cat repositories.json | python -mjson.</description>
    </item>
    
    <item>
      <title>深入理解Paxos算法</title>
      <link>http://www.subond.com/post/learn_paxos/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/learn_paxos/</guid>
      <description>1.Paxos算法 Paxos算法是Leslie Lanmport(2013年获图灵奖)在1990年提出的一种基于消息传递的共识算法(也称为，一致性算法)，由于算法难以理解并没有被ACM TOCS发表。直到1998年，才引起人们的注意，Lanmport重新发表文章。为了便于人们通俗地理解Paxos算法，Lanmport于2001年简化原来的文章，发表了Paxos Made Simple，文章循序渐进地推导出了Paxos算法，并用数学归纳法进行了证明。在此基础上，本文结合Paxos Made Simple，与其他优秀的Paxos算法解读，重新描述Paxos协议，希望可以深入理解基本的Paxos算法理论。
Paxos算法解决的问题是一个分布式系统中如何就某个值(或协议)达成一致。在一个分布式系统中，如果各节点的初始状态一致，每个节点都执行相同的操作，那么他们最后的得到的也是一个一致的状态。一个分布式系统中，通常包含一个主节点和多个备节点。为了保证每个节点执行相同的操作指令，需要每一条执行执行一个“一致性算法”来选举出主节点，进而保证每个节点得到的指令一致。这是一个分布式系统中的重要问题。
2.基本概念 Paxos算法中有三种角色：Proposer, Acceptor, Learner。每个节点需要同时扮演 两种或两种以上的角色。
Proposal Value: 提议的值　Proposal Number: 提议编号，并且要求提议编号不能冲突　Proposal: 提议　=　提议编号 + 提议的值　Proposer: 提议发起者　Acceptors: 提议接受者　Learners: 提议学习者　需要说明的是，Proposer有两种行为，一个是向Acceptors发起Prepare请求，另一个是向Acceptors发起Accept请求。Acceptors则根据协议规则或(自身状态)对Proposers的请求做出应答。Learners根据Acceptors的状态，学习最终被确定的值。
3.两个原则 1安全原则
只能(而且必须)允许一个值被选定；
每个节点只能学习已经被选定的值；
2存活原则
只要多数节点存活，并且彼此可以通信，则会达成以下两件事：
最终会选定某个提议的值　一个被选定的值，其他节点最终会学习到这个值　4.算法过程 第一阶段A，即Prepare阶段
Proposer选择一个提议编号n，向所有的Acceptors发送(广播)Prepare(n)请求。
第一阶段B，即Prepare阶段
Acceptor接收到Prepare(n)请求后，若提议编号比之前接收的Prepare提议编号都要大，则做出如下承诺：即不会在接收比n小的提议，并携带之前Accept的提议中编号小于n的最大值的提议，否则不予理会。
第二阶段A，即Accept阶段
Proposer接收到多数Acceptors的承诺后，如果没有一个Acceptor接受过这个值，则向所有的Acceptors的发起自己的值和提议编号，否则从接受过的值中选择对应的提议编号最大的那个值，作为提议的值，提议编号仍为n。
第二阶段B，即Accept阶段
Acceptor接收到Accept请求后，如果该提议编号不违反自己的做过的承诺，则接受提议。
需要说明是，Proposer发出Prepare请求后，得到多数派的应答，然后再选择一个多数派广播Accept请求，而不一定是将Accept请求发给有应答的Acceptor。这样做的原因是，Prepare阶段得到只是Proposal number 和 Proposal value，而一个值最终是否被选定，还需要Accept阶段的验证。
当一个提议被多数接受后，这个提议的值就被选定choesn，一旦有一个值被选定，那么只有按协议的规则继续演进，后续被选定的值也是同一个值。这就是chosen的一致性问题。
5.算法证明 其实，Paxos算法是一个非常确定的数学问题，可以用数学语言表达，进而用严谨的数学逻辑进行证明。
Paxso算法原命题
如果一个提议{n0,v0}被多数Acceptors所接受，那么不存在提议{n1,v1}被多数Acceptors接受，其中n0 &amp;lt; n1,v1 != v0。
Paxso算法原命题加强
如果一个提议{n0,v0}被多数Acceptors所接受，那么不存在Acceptors接受提议{n1,v1}，其中n0 &amp;lt; n1, v1 != v0。</description>
    </item>
    
    <item>
      <title>Linux中的线程管理</title>
      <link>http://www.subond.com/post/linux_process2/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/linux_process2/</guid>
      <description>1.线程 线程是CPU使用的基本单元，由线程ID，程序计数器，寄存器和栈组成。同属一个进程的所有线程共享代码数据，系统资源。多线程具有如下优点：响应度高，资源共享，更经济(较进程)，充分利用多处理器系统的结构。
2.多线程模型 操作系统中有两种方法提供线程支持：用户层的 用户线程 和 内核层的 内核线程。用户线程受内核内核支持，而无需内核管理；内核线程由系统直接支持和管理。
1）多对一模型：多个用户线程映射到一个内核线程
特点：线程管理由线程库在用户空间进行，效率高；一个线程阻塞系统调用，整个进程阻塞；任意时刻，只有一个线程能访问内核(也就是，多线程不能并行运行在多处理器上)
2）一对一模型：每个用户线程映射到一个内核线程
特点：一个线程阻塞，其他线程不受影响，具有并发功能；允许多线程运行在多处理器上。
3）多对多模型：即多路复用，许多用户线程映射到同等数量或较少数量的内核线程
特点：结合多对一模型和一对一模型的优点，其对应的一个变形是 二级模型 (先允许一个用户线程绑定到一个内核线程上，然后，其他用户线程多路复用)
3.线程库 线程库为程序员提供创建和管理线程的API函数，主要有两种方法来实现线程库：系统调用和非系统调用
1）在用户空间提供没有内核支持的库，称为 非系统调用；
2）由系统支持的内核级库，称为 系统调用
系统调用fork()和exec()
exec():如果一个线程调用exec()，则其指定的程序替换整个进程，包括所有线程。
fork(): 1）fork()之后立即调用exec()，则没有必要替换所有线程，因为exec()会替换所有线程；2）fork()之后没有调用exec()，则另一个进程复制所有线程。
4.线程取消 线程取消是在线程完成之前来终止线程的任务。要取消的线程称为 目标线程。目标线程可以在两种情况下发生：
1）异步取消: 一个线程立即终止目标线程。 (所有线程共享进程的数据，因为异步取消并不会使系统资源空闲)
2）延迟取消: 目标线程不断检查自己是否应该终止，让线程有机会有序结束自己。 (因为具有 取消点，因此更安全)
5.信号处理 信号是用来通知进程某个事件已发生，可分为 异步接收 和 同步接收。所有的信号具有同样的模式：
1）信号是由特定事件发生；2）信号发送至进程；3）一旦发送，信号必须加以处理。
同步信号: 指发送信号到执行操作的同一进程(例如，非法访问，被0除)
异步信号: 指信号由进程外事件产生，发送到另一个进程。(例如，特定键(ctrl+c))
标准发送信号的函数:1) kill(pid_t id, int signal)指定信号的发送进程；2）pthread_kill(pthread_t id, int signal)允许信号被传送到一个指定的线程。
6.线程池 其思想是：进程开始时，创建一定数量的线程，放入线程池等待工作。其优点有，1）不必创建新线程，响应时间更快；2）可以限制线程数量，有效利用系统资源。
Linux线程
Linux系统中并不区分进程和线程，统称为 任务。其系统调用包括：fork()和clone()。
fork():传统复制进程——具备父任务的所有数据的副本
clone()创建线程(子任务)——根据传递给clone()的标志位，子任务指向父任务的数据结构
线程小结 线程是进程内的控制流，多线程进程在同一地址空间内包括多个不同的控制流。用户线程对程序员是可见的，对内核来说却是未知的。操作系统支持和管理内核线程。有三种不同的模式将用户线程和内核线程关联起来：多对一模式，一对一模式和多对多模式。
一个小栗子 /* *Author:subond * Time: 2016-06-19 * Function: 用户在命令行输入一个数字，然后创建一个独立线程来输出小于或等于输入数的所有素数 */ #include &amp;lt;pthread.</description>
    </item>
    
    <item>
      <title>Linux中的线程函数</title>
      <link>http://www.subond.com/post/linux_pthread/</link>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/linux_pthread/</guid>
      <description>线程是CPU使用的基本单元，由线程ID，程序计数器，寄存器和栈组成。同属一个进程的所有线程共享代码数据，系统资源。多线程具有如下优点：响应度高，资源共享，更经济(较进程)，充分利用多处理器系统的结构。以下内容，主要介绍5个基本线程函数。
1.pthread_create()函数 当一个程序由exec启动执行时，称为初始线程或主线程的单个线程就创建了。其余线程则由pthread_create函数创建。
#include &amp;lt;pthread.h&amp;gt; int pthread_create(pthread_t *tid, const pthread_attr_t *attr, void *(*func)(void *), void *arg); //返回：成功为0，出错为正的Exxx值 tid:一个进程内的每个线程都有一个线程ID标识，其数据类型为pthread_t(unsigned long int,即％lu)。如果新的线程创建成功，其ID通过tid指针返回。
attr:属性，每个线程都有许多属性（优先级，初始栈大小，是否成为一个守护线程等等）。若采用默认设置，可置attr参数为空指针（NULL）。
创建一个线程时最后指定的参数就是由该线程执行的函数func及其参数arg。注意 func和arg的声明。func所指函数作为参数接受一个通用指针 (void *)，又作为返回值返回一个通用指针(void *)。另外该函数的唯一调用参数是指针arg，如果需要给函数传递多个参数，可以打包成一个结构，然后将结构的地址作为单个参数传递给函数。
2.pthread_join()函数 #include &amp;lt;pthread.h&amp;gt; int pthread_join(pthread_t *tid, void **status); //返回：成功为0，出错为正的Exxx值。 该函数的功能是等待一个给定线程终止
3.pthread_self()函数 #include &amp;lt;pthread.h&amp;gt; int pthread_self(void) //返回：调用线程的线程ID。 4.pthread_detach()函数 #include &amp;lt;pthread.h&amp;gt; int pthread_detach(pthread_t tid) //返回：成功返回0，出错为正的Exxx值。 一个线程或是可汇合的(joinable,默认值)，或是脱离的(detached)。当一个可汇合的线程终止时，它的线程ID和退出状态将留存到另一个线程对它的调用pthread_join。脱离的线程却像守护进程，当它们终止时，所有相关的资源 都被释放，我们不能等待它们终止。pthread_detach函数就是把指定的线程转变为脱离状态。
5.pthread_exit()函数 #include &amp;lt;pthread.h&amp;gt; int pthread_exit(void *status) //不返回 调用pthread_exit函数可使线程终止。
一个栗子 利用线程的方法，重新编写基本UDP套接字编程
其服务端源码地址：https://github.com/yusubond/Socket-Programming/blob/master/udp_demo/serverv0.3.c
结果如下图所示：</description>
    </item>
    
    <item>
      <title>Git学习手记</title>
      <link>http://www.subond.com/post/gitxuexi/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.subond.com/post/gitxuexi/</guid>
      <description>一、基础篇 指令介绍 $ git config --global user.name &amp;#34;username&amp;#34; # 配置仓库参数，全局应用该用户名 $ git config --global user.email &amp;#34;useremail&amp;#34;	# 配置仓库参数，全局应用该用户邮箱 $ git config user.name # 配置仓库参数，只应用本仓库 $ git config user.email # 配置仓库参数，只应用本仓库 $ git init # 把当前目录变成git可管理的仓库 $ git add files # 添加文件到暂存区 $ git diff file # 查看文件的修改内容 $ git commit -m &amp;#34;提交说明信息&amp;#34; # 提交文件到仓库 $ git status # 获取当前仓库中文档的状态 $ git log # 查看历史记录 $ git log --oneline # 单行显示历史信息 $ git reflog # 显示版本号 $ git checkout -- file # 取出文件 $ git remote add origin &amp;lt;仓库地址&amp;gt; # 添加远程仓库地址 $ git push origin &amp;lt;分支名1&amp;gt; # 推送本地内容到远程仓库分支1 $ git pull origin &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt; # 取回远程主机某个分支，并与本地指定分支合并 $ git clone &amp;lt;仓库地址&amp;gt; # 克隆远程仓库到本地仓库 $ git remote # 查看远程仓库信息 $ git remote -v # 查看远程仓库详细信息 $ git remote add origin &amp;lt;仓库地址&amp;gt; #添加远程仓库地址 # 如果需要修改远程仓库地址，先删除地址，再添加 $ git remote rm origin $ git remote add origin &amp;lt;your_url&amp;gt; 版本回退 git reset &amp;ndash;hard 版本号(即commit_id)</description>
    </item>
    
  </channel>
</rss>
